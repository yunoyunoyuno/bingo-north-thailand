{"version":3,"sources":["components/button/button.js","components/eachSpace/eachSpace.js","components/maintable/MainTable.js","components/Modals/Modals.js","data/words.js","utils/getFinals.js","utils/inFromButton.js","pages/mainpage.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","classes","disable","openModal","onClick","disabled","className","join","EachSpace","text","select","id","String","split","head","mean","MainTable","state_words","set_words","generageNewData","cloneStateWords","selectedWord","find","w","wordIndex","findIndex","eachSpace","map","i","uniqueId","Math","round","random","type","key","Modal","generateNewData","closeModal","words","getFinals","arr","r","valid","boo","inFormButton","data","rows","slice","e","obj","cols","el","push","sub","diagsPos1","diagsPos2","diags","includes","splice","MainPage","useState","state_open","set_open","refCols","useRef","refRows","refDiag","useEffect","dataArray","newData","sort","a","b","cloneState","finalDiags","finalRows","finalCols","validCols","validDiags","forEach","current","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5202bdcf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = (props) => {\r\n  const classes = [\"btn\", \"dis\"];\r\n  const { disable, openModal } = props;\r\n  if (disable) {\r\n    classes[1] = \"active\";\r\n  }\r\n  return (\r\n    <button onClick={openModal} disabled={!disable} className={classes.join(\" \")}>\r\n      เริ่มรอบถัดไป\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./eachSpace.css\";\r\n\r\nconst EachSpace = (props) => {\r\n  const { text, select, id, onClick } = props;\r\n  const classes = [\"main-tabel__element\", \"darkBlue-bg\"];\r\n  if (select) {\r\n    classes[1] = \"blue-bg\";\r\n  }\r\n  const [head, mean] = String(text).split(\"-\");\r\n  return (\r\n    <div onClick={() => onClick(id)} className={classes.join(\" \")}>\r\n      <span>{head}</span>\r\n      <span>{mean}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EachSpace;\r\n","import React from \"react\";\r\nimport EachSpace from \"../eachSpace/eachSpace\";\r\n\r\nimport \"./maintable.css\";\r\n\r\nconst MainTable = ({ state_words, set_words, generageNewData }) => {\r\n  const onClick = (id) => {\r\n    const cloneStateWords = [...state_words];\r\n    const selectedWord = { ...cloneStateWords.find((w) => w.id === id) };\r\n    const wordIndex = cloneStateWords.findIndex((w) => w.id === id);\r\n    selectedWord.select = !selectedWord.select;\r\n    cloneStateWords[wordIndex] = selectedWord;\r\n    set_words(cloneStateWords);\r\n  };\r\n\r\n  const eachSpace = state_words.map((w, i) => {\r\n    const uniqueId = Math.round(Math.random() * 10 ** 5 * Math.random() * 10 ** 5);\r\n    w.id = uniqueId;\r\n    w.type = `a${i + 1}`;\r\n    return <EachSpace key={w.id} id={w.id} text={w.text} select={w.select} onClick={onClick} />;\r\n  });\r\n  return <div className=\"main-table\">{eachSpace}</div>;\r\n};\r\n\r\nexport default MainTable;\r\n","import React from \"react\";\r\n\r\nimport \"./modal.css\";\r\n\r\nconst Modal = (props) => {\r\n  const { generateNewData, closeModal } = props;\r\n  return (\r\n    <div className=\"modal-ctn\">\r\n      <div className=\"modal\">\r\n        <h1>คำเตือน!!</h1>\r\n        <h3 className=\"modal__desc\">รอบถัดไปตารางเดิมจะเปลี่ยนใหม่และย้อนกลับมาไม่ได้แล้ว</h3>\r\n        <div className=\"btn-container\">\r\n          <button onClick={generateNewData} className=\"modal__btn ok\">\r\n            รับทราบ!! เริ่มตารางใหม่ได้เลย\r\n          </button>\r\n          <button onClick={closeModal} className=\"modal__btn cancle\">\r\n            ฉันยังไม่ได้แจ้งว่าฉัน BINGO\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","export const words = [\r\n  {\r\n    id: \"\",\r\n    text: \"สายฮั้ง-เข็มขัด\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ป้าก-ทัพพี\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"เกิบ-รองเท้า\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"สุด-มุ้ง\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"อีฮวก-ลูกอ๊อด\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"เต่ว-กางเกง\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"แอ่ว-เที่ยว\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ขะแจ๋-กุญแจ\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ซ้า-ตระกร้า\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"สะลี-ที่นอน\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"จ้อง-ร่ม\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ฮักเมา-แอบรัก\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ปิ๊ก-กลับ\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"บะแก๋ว-ฝรั่ง\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"บะเต้า-แตงโม\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"เปิ้น-ฉัน\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ตั๋ว-เธอ\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ชาวบาท-ยี่สิบบาท\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"บะต่อม-กระดุม\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ผ่อ-ดู\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ยะ-ทำ\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"อิด-เหนื่อย\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ล่น-วิ่ง\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"ลำ-อร่อย\",\r\n    select: false\r\n  },\r\n  {\r\n    id: \"\",\r\n    text: \"วอก-โกหก\",\r\n    select: false\r\n  }\r\n];\r\n","export const getFinals = (arr) => {\r\n  const final = [\"_\", \"_\", \"_\", \"_\", \"_\"].map((r, i) => {\r\n    let valid = true;\r\n    if (arr[i]) {\r\n      for (let boo of arr[i]) {\r\n        valid = valid && boo;\r\n      }\r\n      r = valid;\r\n      valid = true;\r\n      return r;\r\n    }\r\n    return r;\r\n  });\r\n\r\n  return final;\r\n};\r\n","import { getFinals } from \"./getFinals\";\r\n\r\nexport const inFormButton = ({ type, data }) => {\r\n  if (type === \"rows\") {\r\n    let rows = [\"_\", \"_\", \"_\", \"_\", \"_\"]\r\n      .map((arr, i) => {\r\n        arr = data.slice(i * 5, i * 5 + 5);\r\n        return arr;\r\n      })\r\n      .map((e) => e.map((obj) => obj.select));\r\n\r\n    return getFinals(rows);\r\n  }\r\n\r\n  if (type === \"cols\") {\r\n    let cols = [[], [], [], [], []].map((arr, i) => {\r\n      for (let el of data) {\r\n        if (\r\n          el.type === `a${i + 1}` ||\r\n          el.type === `a${i + 6}` ||\r\n          el.type === `a${i + 11}` ||\r\n          el.type === `a${i + 16}` ||\r\n          el.type === `a${i + 21}`\r\n        ) {\r\n          arr.push(el);\r\n        }\r\n      }\r\n      return arr;\r\n    });\r\n\r\n    cols = cols.map((e) => e.map((sub) => sub.select));\r\n\r\n    return getFinals(cols);\r\n  }\r\n\r\n  if (type === \"diag\") {\r\n    const diagsPos1 = [\"a1\", \"a7\", \"a13\", \"a19\", \"a25\"];\r\n    const diagsPos2 = [\"a5\", \"a9\", \"a13\", \"a17\", \"a21\"];\r\n    let diags = [[], []].map((arr, i) => {\r\n      for (let el of data) {\r\n        if (diagsPos1.includes(el.type) && i === 0) {\r\n          arr.push(el.select);\r\n        } else if (diagsPos2.includes(el.type) && i === 1) {\r\n          arr.push(el.select);\r\n        }\r\n      }\r\n      return arr;\r\n    });\r\n\r\n    return getFinals(diags).splice(0, 2);\r\n  }\r\n};\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Button from \"../components/button/button\";\r\nimport MainTable from \"../components/maintable/MainTable\";\r\nimport Modal from \"../components/Modals/Modals\";\r\nimport { words } from \"../data/words\";\r\nimport { inFormButton } from \"../utils/inFromButton\";\r\n\r\nimport \"./mainpage.css\";\r\n\r\nconst MainPage = (props) => {\r\n  const [state_words, set_words] = useState(words);\r\n  const [state_open, set_open] = useState();\r\n  const refCols = useRef();\r\n  const refRows = useRef();\r\n  const refDiag = useRef();\r\n\r\n  useEffect(() => {\r\n    if (state_words) {\r\n      generateNewData(state_words);\r\n    }\r\n  }, []);\r\n\r\n  const closeModal = () => {\r\n    return set_open(false);\r\n  };\r\n\r\n  const openModal = () => {\r\n    return set_open(true);\r\n  };\r\n\r\n  const generateNewData = (words) => {\r\n    if (words) {\r\n      const dataArray = [...words];\r\n      let newData = [...dataArray];\r\n      newData.sort((a, b) => +a.id - +b.id);\r\n      newData = newData.map((w, i) => {\r\n        w.type = `a${i + 1}`;\r\n        w.select = false;\r\n        return w;\r\n      });\r\n      set_open(false);\r\n      set_words(newData);\r\n    }\r\n  };\r\n\r\n  if (state_words[0] && state_words[0].type) {\r\n    const cloneState = [...state_words];\r\n    const finalDiags = inFormButton({ type: \"diag\", data: cloneState });\r\n    const finalRows = inFormButton({ type: \"rows\", data: cloneState });\r\n    const finalCols = inFormButton({ type: \"cols\", data: cloneState });\r\n\r\n    let validCols = false;\r\n    let validRows = false;\r\n    let validDiags = false;\r\n\r\n    finalCols.forEach((e) => {\r\n      if (e) validCols = validCols || e;\r\n    });\r\n    finalRows.forEach((e) => {\r\n      if (e) validCols = validRows || e;\r\n    });\r\n    finalDiags.forEach((e) => {\r\n      if (e) validDiags = validDiags || e;\r\n    });\r\n\r\n    refCols.current = validCols;\r\n    refRows.current = validRows;\r\n    refDiag.current = validDiags;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {state_open && (\r\n        <Modal closeModal={closeModal} generateNewData={() => generateNewData(state_words)} />\r\n      )}\r\n      <h1 className=\"game-name\">บิงโก คำเมืองน่ารู้</h1>\r\n      <MainTable\r\n        state_words={state_words}\r\n        set_words={set_words}\r\n        generateNewData={generateNewData}\r\n      />\r\n      {(refCols.current || refRows.current || refDiag.current) && (\r\n        <h2 className=\"bingo\">\r\n          <b>! ! BINGO ! !</b>\r\n        </h2>\r\n      )}\r\n      <Button\r\n        disable={refCols.current || refRows.current || refDiag.current}\r\n        openModal={openModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainPage from \"./pages/mainpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}